router id 45.158.41.1;

protocol device {
  scan time 10;
}

protocol kernel {
  # kernel table 208135;
  ipv6 {
    export filter {
      krt_prefsrc = 2a0f:5381::1;
      accept;
    };
  };
}
protocol kernel {
  # kernel table 208135;
  ipv4 {
    export filter {
      krt_prefsrc = 45.158.41.1;
      accept;
    };
  };
}

protocol static static_bgp {
  ipv6 { import all; };
  route 2a0f:5380::/32 via "lo"; # customers
  route 2a0f:5381::/32 via "lo"; # infra
  # 2a0f:5382:x::/48 tunnel, but NO less-specific announcement
}
protocol static static_bgp4 {
  ipv4 { import all; };

  # these are dummy routes never used for actual routing
  # they are put in the oitgoing
  route 45.158.40.0/24 via "lo"; # customers
  route 45.158.41.0/24 via "lo"; # infra
  route 45.158.42.0/24 via "lo";
  route 45.158.43.0/24 via "lo";
}

function net_local() {
  if net.type = NET_IP4 then return net ~ [ 45.158.40.0/22{22,24} ];
  return net ~ [ 2a0f:5380::/29{29,48} ];
}

function as_bogon() {
  return bgp_path ~ [
    0,                      # RFC 7607
    23456,                  # RFC 4893 AS_TRANS
    64496..64511,           # RFC 5398 and documentation/example ASNs
    #64512..65534,           # RFC 6996 Private ASNs
    65535,                  # RFC 7300 Last 16 bit ASN
    65536..65551,           # RFC 5398 and documentation/example ASNs
    65552..131071,          # RFC IANA reserved ASNs
    4200000000..4294967294, # RFC 6996 Private ASNs
    4294967295              # RFC 7300 Last 32 bit ASN
  ];
}

protocol bgp petabyte6 {
  local as 208135;
  source address fd42:acab::20:8135:1;
  neighbor fd42:acab::20:7921:1 as 207921;

  graceful restart on;
  ipv6 {
    next hop self;
    import keep filtered;
    import all;
    export filter {
      if as_bogon() then reject;
      if !net_local() then reject;
      accept;
    };
  };
}

protocol bgp petabyte4 {
  local as 208135;
  source address 10.76.237.1;
  neighbor 10.76.237.2 as 207921;

  graceful restart on;
  ipv4 {
    next hop self;
    import keep filtered;
    import all;
    export filter {
      if as_bogon() then reject;
      if !net_local() then reject;
      accept;
    };
  };
}

